// Code generated by github.com/leiax00/protoc-gen-gin. DO NOT EDIT.

package v1_api

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	v1 "github.com/leiax00/protoc-gen-gin/example/api/common/v1"
	metadata "google.golang.org/grpc/metadata"
)

// This is a compile-time assertion to ensure that this generated file is compatible
// with the leiax00/protoc-gen-gin package it is being compiled against.
// context.metadata.
//gin.errors.

type DemoServiceHttpServer interface {
	GetDemoM1(context.Context, *DemoReq) (*v1.Any, error)
}

type DemoServiceCtl struct {
	srv DemoServiceHttpServer
}

func RegisterDemoServiceHttpServer(r gin.IRouter, srv DemoServiceHttpServer) {
	ctl := &DemoServiceCtl{srv}
	r.Handle("GET", "/v1/route1", ctl._GetDemoM10)
	r.Handle("GET", "/v1/route2/:param_1", ctl._GetDemoM11)
}

func (ctl *DemoServiceCtl) _GetDemoM10(ctx *gin.Context) {
	var in DemoReq

	if err := ctx.ShouldBindQuery(&in); err != nil {
		ctl.paramsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := ctl.srv.GetDemoM1(newCtx, &in)
	if err != nil {
		ctl.error(ctx, err)
		return
	}
	ctl.ok(ctx, out)
}

func (ctl *DemoServiceCtl) _GetDemoM11(ctx *gin.Context) {
	var in DemoReq

	if err := ctx.ShouldBindUri(&in); err != nil {
		ctl.paramsError(ctx, err)
		return
	}

	if err := ctx.ShouldBindQuery(&in); err != nil {
		ctl.paramsError(ctx, err)
		return
	}

	md := metadata.New(nil)
	for k, v := range ctx.Request.Header {
		md.Set(k, v...)
	}
	newCtx := metadata.NewIncomingContext(ctx, md)
	out, err := ctl.srv.GetDemoM1(newCtx, &in)
	if err != nil {
		ctl.error(ctx, err)
		return
	}
	ctl.ok(ctx, out)
}

func (ctl *DemoServiceCtl) response(ctx *gin.Context, httpCode, rpcCode int, msg any, data any) {
	ctx.JSON(httpCode, struct {
		Code int `json:"code"`
		Msg  any `json:"msg,omitempty"`
		Data any `json:"data,omitempty"`
	}{rpcCode, msg, data})
}

func (ctl *DemoServiceCtl) error(ctx *gin.Context, err error) {
	httpCode := 500
	rpcCode := -1
	reason := "UNKNOWN_ERR"
	msg := "UNKNOWN_ERR"

	if err == nil {
		msg += ", err is nil"
		ctl.response(ctx, httpCode, rpcCode, msg, nil)
		return
	}

	type iCode interface {
		GetCode() int32
		GetGrpcCode() int32
		GetReason() string
		GetMessage() string
	}

	var c iCode
	if errors.As(err, &c) {
		httpCode = int(c.GetCode())
		rpcCode = int(c.GetGrpcCode())
		reason = c.GetReason()
		msg = c.GetMessage()
	}

	_ = ctx.Error(err)

	ctl.response(ctx, httpCode, rpcCode, reason, nil)
}

func (ctl *DemoServiceCtl) paramsError(ctx *gin.Context, err error) {
	_ = ctx.Error(err)
	ctl.response(ctx, 400, 400, "PARAM_ERR", nil)
}

func (ctl *DemoServiceCtl) ok(ctx *gin.Context, data any) {
	ctl.response(ctx, 200, 0, nil, data)
}
