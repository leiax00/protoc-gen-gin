package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/descriptorpb"

	"google.golang.org/genproto/googleapis/api/annotations"
)

const (
	contextPkg         = protogen.GoImportPath("context")
	ginPkg             = protogen.GoImportPath("github.com/gin-gonic/gin")
	errPkg             = protogen.GoImportPath("errors")
	metadataPkg        = protogen.GoImportPath("google.golang.org/grpc/metadata")
	deprecationComment = "// Deprecated: Do not use."
)

type GinGenerator struct {
	gen *protogen.Plugin
	gf  *protogen.GeneratedFile
}

func NewGinGenerator(gen *protogen.Plugin) *GinGenerator {
	return &GinGenerator{gen: gen}
}

var globalMethodSets = make(map[string]int) // 记录所有文件中的同名方法的数量, 用于作为标识

func (gen *GinGenerator) generate() {
	for _, f := range gen.gen.Files {
		if !f.Generate {
			continue
		}
		gen.generateFile(f)

	}
}

func (gen *GinGenerator) generateFile(file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	ginFileName := file.GeneratedFilenamePrefix + "_gin.pb.go"
	gen.gf = gen.gen.NewGeneratedFile(ginFileName, file.GoImportPath)
	gen.gf.P("// Code generated by github.com/leiax00/protoc-gen-gin. DO NOT EDIT.")
	gen.gf.P()
	gen.gf.P("package ", file.GoPackageName)
	gen.gf.P()
	gen.gf.P("// This is a compile-time assertion to ensure that this generated file is compatible")
	gen.gf.P("// with the leiax00/protoc-gen-gin package it is being compiled against.")
	gen.gf.P("// ", contextPkg.Ident(""), metadataPkg.Ident(""))
	gen.gf.P("//", ginPkg.Ident(""), errPkg.Ident(""))
	gen.gf.P()
	serveList := gen.parseServices(file)
	for _, serve := range serveList {
		gen.gf.P(serve.toCode())
	}

	return gen.gf
}

func (gen *GinGenerator) parseServices(file *protogen.File) []*service {
	var serviceList []*service
	for _, item := range file.Services {
		var optList []string
		if item.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
			optList = append(optList, "//", deprecationComment)
		}
		serviceList = append(serviceList, &service{
			OptsList: optList,
			Name:     item.GoName,
			FullName: string(item.Desc.FullName()),
			FilePath: file.Desc.Path(),
			Methods:  gen.parseMethods(item),
		})
	}
	return serviceList
}

func (gen *GinGenerator) parseMethods(item *protogen.Service) []*method {
	var methods []*method
	for _, m := range item.Methods {
		rule, ok := proto.GetExtension(m.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		// 存在 http rule 配置
		if rule != nil && ok {
			methods = append(methods, gen.buildHTTPRule(m, rule))

			for _, bind := range rule.AdditionalBindings {
				methods = append(methods, gen.buildHTTPRule(m, bind))
			}
		}
	}
	return methods
}

func (gen *GinGenerator) buildHTTPRule(m *protogen.Method, rule *annotations.HttpRule) *method {
	var (
		path   string
		method string
	)
	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = "GET"
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = "PUT"
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = "POST"
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = "DELETE"
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = "PATCH"
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	md := gen.buildMethodDesc(m, method, path)
	return md
}

func (gen *GinGenerator) buildMethodDesc(m *protogen.Method, httpMethod, path string) *method {
	defer func() { globalMethodSets[m.GoName]++ }()
	md := &method{
		Name:    m.GoName,
		Num:     globalMethodSets[m.GoName],
		Request: gen.gf.QualifiedGoIdent(m.Input.GoIdent),
		Reply:   gen.gf.QualifiedGoIdent(m.Output.GoIdent),
		Route:   &route{Path: path, Method: httpMethod},
	}
	md.initPathParams()
	return md
}
